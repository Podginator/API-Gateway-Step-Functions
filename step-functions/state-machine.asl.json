{
  "StartAt": "GetParametersForPDF",
  "Comment": "",
  "States": {
    "GetParametersForPDF": {
      "Type": "Choice",
      "Comment": "Make Calls to external APIs to get relevant information",
      "Choices": [
        {
          "Variable": "$.provider",
          "StringEquals": "A",
          "Next": "GetCompanyA"
        },
        {
          "Variable": "$.provider",
          "StringEquals": "B",
          "Next": "GetCompanyB"
        }
      ],
      "Default": "GetCompanyDefault"
    },
    "GetCompanyA": {
      "Type": "Task",
      "Comment": "Get Information for Company A",
      "Resource": "${CompanyAArn}",
      "Catch": [
        {
          "ErrorEquals": ["UnableToProcessEventError"],
          "Next": "NotifyError",
          "ResultPath": "$.error" 
        }
      ],
      "Next": "GeneratePDF"
    },
    "GetCompanyB": {
      "Type": "Task",
      "Comment": "Get Information for Company b",
      "Resource": "${CompanyBArn}",
      "Catch": [
        {
          "ErrorEquals": ["UnableToProcessEventError"],
          "Next": "NotifyError",
          "ResultPath": "$.error" 
        }
      ],
      "Next": "GeneratePDF"
    },
    "GetCompanyDefault": {
      "Type": "Task",
      "Comment": "Get Information for Company Default",
      "Resource": "${CompanyDefaultArn}",
      "Catch": [
        {
          "ErrorEquals": ["UnableToProcessEventError"],
          "Next": "NotifyError",
          "ResultPath": "$.error" 
        }
      ],
      "Next": "GeneratePDF"
    },
    "GeneratePDF": { 
      "Type": "Task",
      "Comment": "Generate the PDF and send to s3",
      "Resource": "${GeneratePDFArn}",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "NotifyError",
          "ResultPath": "$.error" 
        }
      ],
      "Next": "SendNotification"
    },
    "NotifyError": { 
      "Type": "Task",
      "Comment": "Send information back via a websocket",
      "Resource": "${SendErrorArn}",
      "End": true
    },
    "SendNotification": {
      "Type": "Task",
      "Comment": "Send information back via a websocket",
      "Resource": "${SendNotificationArn}",
      "End": true,
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "NotifyError",
          "ResultPath": "$.error" 
        }
      ]
    }
  }
}
